plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'org.jetbrains.kotlin.plugin.serialization'
    id 'com.google.gms.google-services'
    id "androidx.navigation.safeargs.kotlin"
    id "com.google.protobuf" version "0.8.17"
}

def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    namespace 'com.hechim'
    compileSdk 33

    defaultConfig {
        applicationId "com.hechim"
        minSdk 26
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        development {
            storeFile file(keystoreProperties['devStoreFile'])
            storePassword keystoreProperties['devStorePassword']
            keyAlias keystoreProperties['devKeyAlias']
            keyPassword keystoreProperties['devKeyPassword']
        }
        production {
            storeFile file(keystoreProperties['prodStoreFile'])
            storePassword keystoreProperties['prodStorePassword']
            keyAlias keystoreProperties['prodKeyAlias']
            keyPassword keystoreProperties['prodKeyPassword']
        }

    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "version"
    productFlavors {
        development {
            dimension "version"
            applicationId "com.hechim.dev"

            manifestPlaceholders["appLabel"] = "@string/app_dev_name"
            Properties properties = new Properties()
            properties.load(project.rootProject.file('local.properties').newDataInputStream())
            def baseUrl = properties.getProperty("DEV_BASE_URL")
            def devApiKey = properties.getProperty("MAPS_DEV_API_KEY")
            manifestPlaceholders["MAPS_API_KEY"] = "${properties.getProperty("MAPS_DEV_API_KEY")}"
            manifestPlaceholders["intentFilterHost"] = "hechimdevelopment"
            buildConfigField "String", "AUTOCOMPLETE_BASE_URL", '"https://maps.googleapis.com/maps/api/place/autocomplete/"'
            buildConfigField "String", "BASE_URL", "\"$baseUrl\""



            buildConfigField 'String', 'API_KEY', "\"$devApiKey\""

            versionCode 5
            versionName "0.0.1-demo5-splashcreen"

            signingConfig signingConfigs.development
        }
        production {
            dimension "version"
            applicationId "com.hechim"

            manifestPlaceholders["appLabel"] = "@string/app_prod_name"

            Properties properties = new Properties()
            properties.load(project.rootProject.file('local.properties').newDataInputStream())
            manifestPlaceholders["MAPS_API_KEY"] = "${properties.getProperty("MAPS_PROD_API_KEY")}"

            buildConfigField "String", "AUTOCOMPLETE_BASE_URL", '"https://maps.googleapis.com/maps/api/place/autocomplete/"'

            def prodApiKey = properties.getProperty("MAPS_PROD_API_KEY")
            buildConfigField 'String', 'API_KEY', "\"$prodApiKey\""
            signingConfig signingConfigs.production
        }
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildFeatures{
        viewBinding true
        dataBinding true
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

kapt {
    correctErrorTypes = true
}

dependencies {

    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.appcompat:appcompat:1.6.0'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.navigation:navigation-runtime-ktx:2.5.3'
    implementation 'androidx.navigation:navigation-fragment:2.5.3'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    //firebase dependencies
    //bom
    implementation platform('com.google.firebase:firebase-bom:31.1.1')
    //analytics
    implementation 'com.google.firebase:firebase-analytics-ktx:21.2.0'
    implementation 'com.google.firebase:firebase-core:21.1.1'
    implementation 'com.google.firebase:firebase-dynamic-links-ktx:21.1.0'


    //Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation "com.squareup.okhttp3:okhttp:4.9.3"
    implementation "com.squareup.okhttp3:logging-interceptor:4.9.0"

    //Jwt decoder
    implementation 'com.auth0.android:jwtdecode:2.0.1'

    // Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4'

    // Coroutine Lifecycle Scopes
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.5.1"
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.5.1'

    //Activity KTX for viewModels()
    implementation "androidx.activity:activity-ktx:1.6.1"

    //Dagger - Hilt
    implementation "com.google.dagger:hilt-android:2.42"
    kapt "com.google.dagger:hilt-android-compiler:2.42"
    kapt "androidx.hilt:hilt-compiler:1.0.0"




    //Secure storage
    implementation "androidx.security:security-crypto:1.1.0-alpha04"

    //serialization
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.2"

    // Easy permission
    implementation 'com.vmadalin:easypermissions-ktx:1.0.0'
    implementation("org.jetbrains.kotlinx:kotlinx-datetime:0.4.0")

    //Glide - image loading
    implementation 'com.github.bumptech.glide:glide:4.14.2'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.14.2'


    implementation "androidx.media:media:1.6.0"

    implementation 'androidx.core:core:1.9.0'

    implementation  "androidx.datastore:datastore:1.0.0"
    // Starting from Protobuf 3.8.0, use the lite runtime library
    implementation  "com.google.protobuf:protobuf-javalite:3.18.0"




    implementation "androidx.datastore:datastore-preferences:1.0.0"


    //Splash screenss
    //sad

    implementation 'androidx.core:core-splashscreen:1.0.0'

}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.18.0"
    }

    // Generates the java Protobuf-lite code for the Protobufs in this project. See
    // https://github.com/google/protobuf-gradle-plugin#customizing-protobuf-compilation
    // for more information.
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite'
                }
            }
        }
    }
}